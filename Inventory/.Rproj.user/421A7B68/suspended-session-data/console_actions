{
    "data" : [
        "\nR version 3.2.5 (2016-04-14) -- \"Very, Very Secure Dishes\"\nCopyright (C) 2016 The R Foundation for Statistical Computing\nPlatform: x86_64-pc-linux-gnu (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\n  Natural language support but running in an English locale\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\n",
        "Type 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n",
        "> ",
        "print(\"Hello, world\")",
        "[1] \"Hello, world\"\n",
        "> ",
        "print(\"Hello, world\")",
        "[1] \"Hello, world\"\n",
        "> ",
        "print(\"Hello, world\")",
        "[1] \"Hello, world\"\n",
        "> ",
        "print(\"Hello, world\")",
        "[1] \"Hello, world\"\n",
        "> ",
        "# we use plot() function, assigning arguments with \"=\", with commas as separators",
        "> ",
        "plot(\"x\" = years.into.the.future.vec, \"y\" = N.future.vec) ",
        "Error in plot(x = years.into.the.future.vec, y = N.future.vec) : \n  object 'years.into.the.future.vec' not found\n",
        "> ",
        "title(\"Our first graph\")",
        "Error in title(\"Our first graph\") : plot.new has not been called yet\n",
        "> ",
        "R <- .01",
        "> ",
        "years.into.the.future.vec <- 0:83 # the \":\" creates a sequence of numbers",
        "> ",
        "print(length(years.into.the.future.vec)) # the length of the vector, should be 84",
        "[1] 84\n",
        "> ",
        "N.future.vec <- N.2017 * exp(R * years.into.the.future.vec)",
        "Error: object 'N.2017' not found\n",
        "> ",
        "print(N.future.vec) # 84 values will be displayed",
        "Error in print(N.future.vec) : object 'N.future.vec' not found\n",
        "> ",
        "N.2017 <- 7.3  # Billions of people",
        "> ",
        "N.2100.estimated <- N.2017 * exp(.01 * 83)   # N(0) e^{R t}",
        "> ",
        "print(N.2100.estimated)",
        "[1] 16.74123\n",
        "> ",
        "R <- .01",
        "> ",
        "years.in.future.vec <- 0:83 # the \":\" creates a sequence of numbers",
        "> ",
        "print(length(years.in.future.vec)) # the length of the vector, should be 84",
        "[1] 84\n",
        "> ",
        "N.future.vec <- N.2017 * exp(R * years.in.future.vec)",
        "> ",
        "print(N.future.vec) # 84 values will be displayed",
        " [1]  7.300000  7.373366  7.447470  7.522318  7.597919  7.674279  7.751407  7.829310  7.907996\n[10]  7.987472  8.067748  8.148830  8.230727  8.313447  8.396999  8.481390  8.566629  8.652725\n[19]  8.739687  8.827522  8.916240  9.005850  9.096360  9.187780  9.280119  9.373386  9.467590\n[28]  9.562740  9.658848  9.755921  9.853969  9.953003 10.053033 10.154067 10.256117 10.359193\n[37] 10.463305 10.568463 10.674678 10.781960 10.890320 10.999770 11.110319 11.221980 11.334763\n[46] 11.448679 11.563740 11.679958 11.797343",
        " 11.915908 12.035665 12.156626 12.278802 12.402206\n[55] 12.526850 12.652747 12.779909 12.908349 13.038081 13.169115 13.301467 13.435149 13.570175\n[64] 13.706557 13.844310 13.983448 14.123984 14.265932 14.409307 14.554123 14.700395 14.848136\n[73] 14.997362 15.148088 15.300329 15.454100 15.609416 15.766294 15.924748 16.084794 16.246449\n[82] 16.409728 16.574649 16.741227\n",
        "> ",
        "# we use plot() function, assigning arguments with \"=\", with commas as separators",
        "> ",
        "plot(\"x\" = years.in.future.vec, \"y\" = N.future.vec) ",
        "> ",
        "title(\"Our first graph\")",
        "> ",
        "year.vec <- years.into.the.future.vec + 2017",
        "> ",
        "plot(x = year.vec, ",
        "+ ",
        "     y = N.future.vec,",
        "+ ",
        "     ylab = \"Billions\", # label of y axis",
        "+ ",
        "     type = \"l\")        # changes points to \"l\", can try \"b\"",
        "> ",
        "title(\"Future world population assuming 1% growth per year\")",
        "> ",
        "We'll be reviewing most of this material in the labs that follow.",
        "+ ",
        "print(\"Hello, world\")",
        "+ ",
        "print(\"Hello, world\")",
        "+ ",
        "\"\"",
        "+ ",
        "\"\"",
        "+ ",
        "\n",
        "> ",
        "# Anything in chunk after a hashtag are comments -- and will be ignored by R",
        "> ",
        "x <- 3",
        "> ",
        "x * x",
        "[1] 9\n",
        "> ",
        "N.2017 <- 7.3  # Billions of people",
        "> ",
        "N.2100.estimated <- N.2017 * exp(.01 * 83)   # N(0) e^{R t}",
        "> ",
        "print(N.2100.estimated)",
        "[1] 16.74123\n",
        "> ",
        "R <- .01",
        "> ",
        "years.in.future.vec <- 0:83 # the \":\" creates a sequence of numbers",
        "> ",
        "print(length(years.in.future.vec)) # the length of the vector, should be 84",
        "[1] 84\n",
        "> ",
        "N.future.vec <- N.2017 * exp(R * years.in.future.vec)",
        "> ",
        "print(N.future.vec) # 84 values will be displayed",
        " [1]  7.300000  7.373366  7.447470  7.522318  7.597919  7.674279  7.751407  7.829310  7.907996\n[10]  7.987472  8.067748  8.148830  8.230727  8.313447  8.396999  8.481390  8.566629  8.652725\n[19]  8.739687  8.827522  8.916240  9.005850  9.096360  9.187780  9.280119  9.373386  9.467590\n[28]  9.562740  9.658848  9.755921  9.853969  9.953003 10.053033 10.154067 10.256117 10.359193\n[37] 10.463305 10.568463 10.674678 10.781960 10.890320 10.999770 11.110319 11.221980 11.334763\n[46] 11.448679 11.563740 11.679958 11.797343",
        " 11.915908 12.035665 12.156626 12.278802 12.402206\n[55] 12.526850 12.652747 12.779909 12.908349 13.038081 13.169115 13.301467 13.435149 13.570175\n[64] 13.706557 13.844310 13.983448 14.123984 14.265932 14.409307 14.554123 14.700395 14.848136\n[73] 14.997362 15.148088 15.300329 15.454100 15.609416 15.766294 15.924748 16.084794 16.246449\n[82] 16.409728 16.574649 16.741227\n",
        "> ",
        "# we use plot() function, assigning arguments with \"=\", with commas as separators",
        "> ",
        "plot(\"x\" = years.in.future.vec, \"y\" = N.future.vec) ",
        "> ",
        "title(\"Our first graph\")",
        "> ",
        "year.vec <- years.in.future.vec + 2017",
        "> ",
        "plot(x = year.vec, ",
        "+ ",
        "     y = N.future.vec,",
        "+ ",
        "     ylab = \"Billions\", # label of y axis",
        "+ ",
        "     type = \"l\")        # changes points to \"l\", can try \"b\"",
        "> ",
        "title(\"Future world population assuming 1% growth per year\")"
    ],
    "type" : [
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1
    ]
}